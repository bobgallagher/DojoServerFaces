/*******************************************************************************
 * 	Copyright (c) 2011, The Dojo Foundation All Rights Reserved.
 * 	Available via Academic Free License >= 2.1 OR the modified BSD license.
 * 	see: http://dojotoolkit.org/license for details
 *******************************************************************************/
package org.dojoserverfaces.build.process.generator;

import groovy.text.SimpleTemplateEngine;
import groovy.text.Template;

import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.util.HashMap;

import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;

/**
 * The SourceGenerator class defines an abstract class from which specific
 * source generators must inherit.
 */

public abstract class SourceGenerator {
     private HashMap<String, Object> context;
     private String outputLocation;
     private ProcessingEnvironment processingEnv;
     private RoundEnvironment roundEnv;
     private boolean shouldGenerate;
     private Template template;
     
     /**
      * Creates a SourceGenerator object.
      * 
      * @param processingEnv a ProcessingEnvironment object containing the
      *        processing environment to use.
      * @param roundEnv a RoundEnvironment object containing the round
      *        environment to use.
      * @param outputLocation a String containing the location where the
      *        generated source should be saved.
      * @throws Throwable if an error occurs while creating this source
      *         generator.
      */
     
     public SourceGenerator (ProcessingEnvironment processingEnv,
          RoundEnvironment roundEnv, String outputLocation) throws Throwable {
          String templatePath = getTemplatePath();
          
          this.context = new HashMap<String, Object>();
          this.outputLocation = outputLocation;
          this.processingEnv = processingEnv;
          this.roundEnv = roundEnv;
          this.shouldGenerate = false;
          
          if (templatePath != null) {
               SimpleTemplateEngine engine;
               Reader reader;
               
               // Create the Groovy template.
               
               engine = new SimpleTemplateEngine();
               
               reader = new InputStreamReader
                    (getClass().getClassLoader().getResourceAsStream
                         (templatePath));
          
               this.template = engine.createTemplate (reader);
          
               reader.close();
          }
     }
     
     /**
      * Retrieves a context property with a given name.
      * 
      * @param name a String containing the name of the context property to
      *        retrieve.
      * @return an Object containing the value of the given context property,
      *         or null if no context property with the given name exists.
      */
     
     protected Object getContextProperty (String name) {
          return this.context.get (name);
     }
     
     /**
      * Retrieves the location where the source generated by this source
      * generator will be saved.
      * 
      * @return a String containing the location where the source generated by
      *         this source generator will be saved.
      */
     
     protected String getOutputLocation () {
          return this.outputLocation;
     }
     
     /**
      * Retrieves the processing environment associated with this source
      * generator.
      * 
      * @return a ProcessingEnvironment object containing the processing
      *         environment associated with this source generator.
      */
     
     protected ProcessingEnvironment getProcessingEnvironment () {
          return this.processingEnv;
     }
     
     /**
      * Retrieves the round environment associated with this source generator.
      * 
      * @return a RoundEnvironment object containing the round environment
      *         associated with this source generator.
      */
     
     protected RoundEnvironment getRoundEnvironment () {
          return this.roundEnv;
     }
     
     /**
      * Retrieves the base source location where the source generated by this
      * source generator will be located.
      * 
      * @return a SourceLocation object containing the base source location
      *         where source generated by this source generator will be
      *         located.
      */
     
     protected abstract SourceLocation getSourceLocation ();
     
     /**
      * Retrieves the template path associated with this source generator.
      * 
      * @return a String containing the template path associated with this
      *         source generator.
      */
     
     protected abstract String getTemplatePath ();
     
     /**
      * Retrieves the status as to whether or not code should be generated for
      * this source generator.
      * 
      * @return a boolean containing true if code should be generated for this
      *         source generator, false otherwise.
      */
     
     protected boolean shouldGenerate () {
          return this.shouldGenerate;
     }
     
     /**
      * Sets the output location associated with this source generator.
      * 
      * @param outputLocation a String containing the output location to
      *        associate with this source generator.
      */
     
     protected void setOutputLocation (String outputLocation) {
          this.outputLocation = outputLocation;
     }
     
     /**
      * Sets whether or not code should be generated for this source generator.
      * 
      * @param shouldGenerate a boolean containing true if code should be
      *        generated for this source generator, false otherwise.
      */
     
     protected void setShouldGenerate (boolean shouldGenerate) {
          this.shouldGenerate = shouldGenerate;
     }
     
     /**
      * Adds a context property to this source generator.
      * 
      * @param name a String containing the name of the context property to
      *        add.
      * @param value an Object containing the value of the context property to
      *        add.
      */
     
     protected void addContextProperty (String name, Object value) {
          this.context.put (name, value);
     }
     
     /**
      * Applies the template associated with this source generator.
      * 
      * @return a String object containing the result of applying the template
      *         associated with this source generator.
      * @throws Throwable if an error occurs while applying the template
      *         associated with this source generator.
      */
     
     protected String applyTemplate () throws Throwable {
          StringWriter result = new StringWriter();
          
          this.context.put ("context", this.context);
          
          this.template.make (this.context).writeTo (result);
          
          return result.toString();
     }
}
